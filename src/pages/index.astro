---
export const prerender = true;
Astro.response.headers.set('Vercel-CDN-Cache-Control', 'max-age=3600',);
Astro.response.headers.set('CDN-Cache-Control', 'max-age=60',);
---
<style>
	/* 
		use code folding to hide this

		it has to be inlined to avoid any FOUC
	*/
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	html, body {
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	.accent {
		pointer-events: none;
		max-width: 20px;
	}

	#output {
		color: #1e1e1e;
		background-color: #fffbe8;
	}

	.errors {
		background-color: #584355;
		cursor: ew-resize;
	}

	/* Responsive cursor style for smaller screens */
	@media (max-width: 1023px) { /* Adjust breakpoint as needed for 'md' */
		.errors {
			cursor: ns-resize; /* Vertical resize */
		}
	}

	.codeflask {
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	.codeflask, .codeflask * {
		box-sizing: border-box;
	}

	.codeflask__pre {
		pointer-events: none;
		z-index: 3;
		overflow: hidden;
	}

	.codeflask__textarea {
		background: none;
		border: none;
		color: #fff;
		z-index: 1;
		resize: none;
		font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
		-webkit-appearance: pre;
		appearance: pre;
		caret-color: #111;
		z-index: 2;
		width: 100%;
		height: 100%;
	}

	.codeflask--has-line-numbers .codeflask__textarea {
		width: calc(100% - 40px);
	}

	.codeflask__code {
		display: block;
		font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
		overflow: hidden;
	}

	.codeflask__flatten {
		padding: 10px;
		font-size: 13px;
		line-height: 20px;
		white-space: pre;
		position: absolute;
		top: 0;
		left: 0;
		overflow: auto;
		margin: 0 !important;
		outline: none;
		text-align: left;
	}

	.codeflask--has-line-numbers .codeflask__flatten {
		width: calc(100% - 20px);
		left: 20px;
	}

	.codeflask__line-highlight {
		position: absolute;
		top: 10px;
		left: 0;
		width: 100%;
		height: 20px;
		background: rgba(0,0,0,0.1);
		z-index: 1;
	}

	.codeflask__lines {
		padding: 11px 4px;
		padding-right: 10px;
		font-size: 10px;
		line-height: 20px;
		font-family: 'Cousine', monospace;
		position: absolute;
		left: 0;
		top: 0;
		width: 30px;
		height: 100%;
		text-align: right;
		color: #999;
		z-index: 2;
	}

	.codeflask__lines__line {
		display: block;
	}

	.codeflask.codeflask--has-line-numbers {
		padding-left: 10px;
	}

	.codeflask.codeflask--has-line-numbers:before {
		content: '';
		position: absolute;
		left: 0;
		top: 0;
		width: 30px;
		height: 100%;
		background: #eee;
		z-index: 1;
	}

	#loading-spinner {
		position: absolute;
		height: 100vh; /* Adjust the height as needed */
		width: 100vw; /* Adjust the width as needed */
		z-index: 1000;
		background-color: #fff;
	}

	#loading-spinner svg {
		margin-left: auto;
		margin-right: auto;
		margin-top: calc(50vh - 25px); /* Adjust the top margin as needed */
		fill: none;
	}

	#loading-spinner path {
		stroke-dasharray: 175; /* This is the approximate length of the path. Adjust as needed. */
		stroke-dashoffset: 175;
		animation: trace 1.4s linear infinite;
	}

	@keyframes trace {
		0% {
			stroke-dashoffset: 175;
		}
		100% {
			stroke-dashoffset: 0;
		}
	}

	@keyframes fadeOut {
		from { opacity: 1; }
		to { opacity: 0; }
	}

	.fade-out {
		animation: fadeOut 1s ease-out forwards;
	}

	#drawerMenu {
		display: none;
		opacity: 0;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 4;
        overflow: hidden;
        text-align: center;
        background-color: rgba(255,255,255,0.95);
    }
	.fade-in {
		opacity: 1;
		animation-name: fadeInOpacity;
		animation-iteration-count: 1;
		animation-timing-function: ease-in;
		animation-duration: 0.1s;
        animation-fill-mode: forwards; 
	}

	@keyframes fadeInOpacity {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
</style>
<script is:inline type="module">
	// this script tag doesn't have access to npm modules
	// it is not really processed by astro
	// anything here is just passed to the client to be 
	// handled by the browser as-is
	//
	// so it's safe to reference anything inside /public/js
	// but do not reference anything from NPM

	import CodeFlask from '/js/codeflask.module.js'
	import { 
		hideSpinner,
		decodeFromUrl,
		updateState,
		prismGrammar,
		debounce
	 } from '/js/helpers/index.js'

	// select editor
	const editorElem = document.getElementById('editor')

	// initialize codeflask
	const flask = new CodeFlask(editorElem, { language: 'gleam', lineNumbers: true })

	// load hash from url
	const queryString = window.location.search;
	//console.log(queryString); // DEBUG

	const urlParams = new URLSearchParams(queryString);
	//console.log(urlParams); // DEBUG

	let loadFromUrl = false
	let loadedCodeHash = ""
	let loadedCodeHashLength = 0
	try {
		loadedCodeHash = urlParams.get('h')
		//console.log(loadedCodeHash); // DEBUG

		loadedCodeHashLength = loadedCodeHash.length
		//console.log(loadedCodeHashLength); // DEBUG
		loadFromUrl = true
	} catch (e) {
		// no hash present, loading default example
		// no need to spit out error
	}

	const snippet = `import gleam/io

pub fn main() {
	io.println("Hello world!")
}`

	// get initial code
	const initialCode = loadFromUrl ? decodeFromUrl(loadedCodeHash) : snippet

	// add language w/ highlighter
	flask.addLanguage("gleam", prismGrammar)

	// update code w/ highlighting
	flask.updateCode(initialCode)

	// flask.onUpdate(debounce((code) => sendToWorker(code), 200))

	// flask.onUpdate((code) => {  updateState(code) })

	//const debouncedSendToWorker = debounce((code) => sendToWorker(code), 600)
	const debouncedSendToWorker = debounce((code) => {
      //sendToWorker(code);
      updateState(code);

      // Post the updated code to the iframe
      const base64Code = window.btoa(unescape(encodeURIComponent(code)));
      const iframe = document.getElementById('sandbox');
      if (iframe) {
		console.log('sending this code to sandbox: '+ base64Code)
        iframe.contentWindow.postMessage({ code: base64Code }, '*');
      }
    }, 600);

	flask.onUpdate((code) => {
		debouncedSendToWorker(code)
		updateState(code)
	})

	document.addEventListener('DOMContentLoaded', function() {
		const resizer = document.getElementById('errors');
		const leftPanel = document.getElementById('editor');
		const rightPanel = document.getElementById('output');
		let isDragging = false;

		function updatePanelSizes(clientX, clientY) {
			const containerRect = resizer.parentNode.getBoundingClientRect();

			if (window.innerWidth >= 1024) { // lg and up
				const minPanelWidth = containerRect.width * 0.3;
				let leftWidth = clientX - containerRect.left;
				let rightWidth = containerRect.width - leftWidth - resizer.offsetWidth;

				if (leftWidth < minPanelWidth) {
					leftWidth = minPanelWidth;
					rightWidth = containerRect.width - leftWidth - resizer.offsetWidth;
				} else if (rightWidth < minPanelWidth) {
					rightWidth = minPanelWidth;
					leftWidth = containerRect.width - rightWidth - resizer.offsetWidth;
				}

				leftPanel.style.width = `${leftWidth}px`;
				rightPanel.style.width = `${rightWidth}px`;
			} else { // sm & md
				const minPanelHeight = containerRect.height * 0.3;
				let topHeight = clientY - containerRect.top;
				let bottomHeight = containerRect.height - topHeight - resizer.offsetHeight;

				if (topHeight < minPanelHeight) {
					topHeight = minPanelHeight;
					bottomHeight = containerRect.height - topHeight - resizer.offsetHeight;
				} else if (bottomHeight < minPanelHeight) {
					bottomHeight = minPanelHeight;
					topHeight = containerRect.height - bottomHeight - resizer.offsetHeight;
				}

				leftPanel.style.height = `${topHeight}px`;
				rightPanel.style.height = `${bottomHeight}px`;
			}
		}

		function startDragging(e) {
			isDragging = true;
			e.preventDefault();
		}

		resizer.addEventListener('mousedown', startDragging);
		resizer.addEventListener('touchstart', startDragging);

		function onMouseMove(e) {
			if (!isDragging) return;
			let clientX = e.clientX || e.touches[0].clientX;
			let clientY = e.clientY || e.touches[0].clientY;
			updatePanelSizes(clientX, clientY);
		}

		document.addEventListener('mousemove', onMouseMove);
		document.addEventListener('touchmove', onMouseMove);

		function stopDragging() {
			isDragging = false;
			adjustLayout();
		}

		document.addEventListener('mouseup', stopDragging);
		document.addEventListener('touchend', stopDragging);

		// Function to adjust layout
		function adjustLayout() {
			// Tailwind's breakpoints (adjust these values if you're using custom breakpoints)
				const lgBreakpoint = 1023; // pixels

			if (window.innerWidth > lgBreakpoint) {
				// 'lg' and above:
				leftPanel.style.height = '100%'; 
				rightPanel.style.height = '100%'; 
				resizer.style.width = '5px';
				resizer.style.height = '100%';
			} else {
				// 'sm' and 'md':
				leftPanel.style.width = 'calc(97% + 10px)'; 
				rightPanel.style.width = 'calc(97% + 10px)';
				resizer.style.width = 'calc(97% + 10px)';
				resizer.style.height = '5px';
			}
		}

		// Call adjustLayout once on page load
		adjustLayout()

		window.addEventListener('resize', function() {
			// using setTimeout causes too much of a backlog
			// on the event loop & the rendering in browser
			// can't keep up. so there's a FOUC when switching
			// between output area being on the left vs at bottom
			//
			// need to disable this to allow for more fluid window resize
			// will need to test perf if adjusting on every resize event
			// causes some unexpected problems or high cpu use. should be OK tho	
			//
			//
			// let resizeTimeout 
			// console.log('resize event triggered')
			// clearTimeout(resizeTimeout);
			// resizeTimeout = setTimeout(adjustLayout, 0); // Adjust delay as needed

			// call whenever any resize happens, no throttling
			adjustLayout()
		});
		
		window.addEventListener('message', function(e) {
			if (e.data.type === 'hideSpinner') {
				hideSpinner();
			}
		});
	});
</script>
<div id="loading-spinner">
	<svg viewBox="0 0 50 50" width="50" height="50">
		<path d="M25,0 L30,18 L50,18 L35,30 L40,50 L25,38 L10,50 L15,30 L0,18 L20,18 L25,0 Z" fill="none" stroke="rgb(255, 175, 243)" stroke-width="1"></path>
	</svg>
</div>
<div id="container" class="flex flex-col lg:flex-row w-screen h-screen">
	<div class="accent h-screen absolute z-10 w-[20px]">
		<div class="h-screen w-[50%] bg-[#ffaff3] float-left"></div>
		<div class="h-screen w-[50%] bg-fuchsia-200 float-left"></div>
	</div>
	<div id="editor" class="flex-grow relative float-left w-[calc(97% + 10px)] ml-[20px] lg:w-[50%] h-[50%] lg:h-screen"></div>
	<script is:raw type="gleam" id="code"></script>
	<div id="errors" class="errors h-[5px] lg:h-screen w-[calc(97% + 10px)] lg:w-[5px] ">&nbsp;</div>
	<div id="output" class="flex-grow relative w-[calc(97% + 10px)] m-[0px] p-[0px] lg:w-[calc(50% - 25px)] h-[49%] text-xs lg:text-sm lg:h-screen pl-7">
		<iframe class="w-full h-full" id="sandbox" sandbox="allow-scripts allow-same-origin" src="/sandbox"></iframe>
	</div>
</div>